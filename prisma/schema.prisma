generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("MYSQL")
  shadowDatabaseUrl = env("MYSQL_SHADOW")
}

model blacklists {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model features {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  description   String?
  featureCreate Boolean  @default(false)
  featureRead   Boolean  @default(false)
  featureUpdate Boolean  @default(false)
  featureDelete Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  privileges privileges[]
}

model privileges {
  id              Int      @id @default(autoincrement())
  name            String   @unique // uuidv4
  roleId          Int
  featureId       Int
  privilegeCreate Boolean  @default(false)
  privilegeRead   Boolean  @default(false)
  privilegeUpdate Boolean  @default(false)
  privilegeDelete Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  role    roles    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  feature features @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@unique([roleId, featureId])
  @@index([roleId])
  @@index([featureId])
}

model roles {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  privileges privileges[]
  users      users[]
}

model users {
  id        Int      @id @default(autoincrement())
  photo     String? // Upload Photo
  roleId    Int
  name      String
  email     String   @unique
  password  String
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role roles @relation(fields: [roleId], references: [id], onDelete: Cascade)

  authorTasks   tasks[] @relation("AuthorTasks")
  assignedTasks tasks[] @relation("AssignedTasks")

  changedPhaseHistories taskhistories[] @relation("ChangedByUser")

  events       events[]
  transactions transactions[]

  changedTransactionHistories transactionhistories[] @relation("ChangedByUser")

  @@index([roleId])
}

/**
 * --------------------------TRANSACTIONS--------------------------
 */
model clients {
  id        Int      @id @default(autoincrement())
  photo     String? // upload
  name      String
  country   String
  state     String
  city      String
  zipcode   String
  phone     String   @unique
  address   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions        transactions[]
  fromClientHistories transactionhistories[] @relation("FromClient")
  toClientHistories   transactionhistories[] @relation("ToClient")

  @@index([name])
  @@index([city])
}

model currencies {
  id        Int      @id @default(autoincrement())
  name      String
  symbol    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions          transactions[]
  fromCurrencyHistories transactionhistories[] @relation("FromCurrency")
  toCurrencyHistories   transactionhistories[] @relation("ToCurrency")
}

model transactions {
  id              Int      @id @default(autoincrement())
  userId          Int
  clientId        Int
  stageId         Int
  currencyId      Int
  transactionDate DateTime
  amount          BigInt?  @db.BigInt
  notes           String?  @db.Text
  sheet           String?
  tab             Int?
  tabname         String?
  sheetrow        Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user     users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  client   clients    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stage    stages     @relation(fields: [stageId], references: [id], onDelete: Cascade)
  currency currencies @relation(fields: [currencyId], references: [id], onDelete: Cascade)

  transactionHistories transactionhistories[]

  @@unique([userId, sheet, tab, sheetrow]) // prevents duplicate imports
  @@index([userId, transactionDate])
  @@index([clientId])
  @@index([stageId])
  @@index([transactionDate])
  @@map("transactions")
}

model transactionhistories {
  id             Int      @id @default(autoincrement())
  transactionId  Int
  fromClientId   Int?
  toClientId     Int
  fromStageId    Int?
  toStageId      Int
  fromCurrencyId Int?
  toCurrencyId   Int
  changedById    Int?
  name           String   @db.VarChar(191) // uuidv4 or label
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  transaction  transactions @relation(fields: [transactionId], references: [id])
  fromClient   clients?     @relation("FromClient", fields: [fromClientId], references: [id])
  toClient     clients      @relation("ToClient", fields: [toClientId], references: [id])
  fromStage    stages?      @relation("FromStage", fields: [fromStageId], references: [id])
  toStage      stages       @relation("ToStage", fields: [toStageId], references: [id])
  fromCurrency currencies?  @relation("FromCurrency", fields: [fromCurrencyId], references: [id])
  toCurrency   currencies   @relation("ToCurrency", fields: [toCurrencyId], references: [id])
  changedBy    users?       @relation("ChangedByUser", fields: [changedById], references: [id])

  @@index([transactionId])
  @@index([toClientId])
  @@index([toStageId])
  @@index([toCurrencyId])
  @@index([changedById])
  @@map("transactionhistories")
}

model stages {
  id        Int      @id @default(autoincrement())
  dataOrder Int
  name      String   @unique
  name_en   String
  name_de   String
  name_nl   String
  name_id   String
  name_ph   String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions       transactions[]
  fromStageHistories transactionhistories[] @relation("FromStage")
  toStageHistories   transactionhistories[] @relation("ToStage")
}

/**
 * ----------------------------------------------------------------
 */
/**
 * -----------------------------EVENTS-----------------------------
 */
model events {
  id            Int      @id @default(autoincrement())
  userId        Int
  title         String
  startDateTime DateTime
  endDateTime   DateTime
  status        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startDateTime])
  @@index([startDateTime])
}

model schedules {
  id        Int      @id @default(autoincrement())
  title     String
  startDateTime DateTime
  endDateTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startDateTime])
}

/**
 * ----------------------------------------------------------------
 */
/**
 * ------------------------------TASKS-----------------------------
 */
model phases {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  name_en   String
  name_de   String
  name_nl   String
  name_id   String
  name_ph   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks              tasks[]
  fromPhaseHistories taskhistories[] @relation("FromPhase")
  toPhaseHistories   taskhistories[] @relation("ToPhase")
}

model priorities {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  name_en   String
  name_de   String
  name_nl   String
  name_id   String
  name_ph   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks tasks[]
}

model tasks {
  id          Int      @id @default(autoincrement())
  image       String? // Upload image
  file        String? // Upload file
  authorId    Int
  assigneeId  Int?
  priorityId  Int
  phaseId     Int
  start       DateTime
  deadline    DateTime
  name        String
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author   users      @relation("AuthorTasks", fields: [authorId], references: [id])
  assignee users?     @relation("AssignedTasks", fields: [assigneeId], references: [id])
  priority priorities @relation(fields: [priorityId], references: [id], onDelete: Cascade)
  phase    phases     @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  phaseHistories taskhistories[]

  @@index([assigneeId, phaseId])
  @@index([assigneeId, deadline])
  @@index([authorId])
  @@index([phaseId, priorityId])
  @@index([start])
}

model taskhistories {
  id          Int      @id @default(autoincrement())
  taskId      Int
  fromPhaseId Int?
  toPhaseId   Int
  changedById Int
  name        String //uuidv4
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  task      tasks   @relation(fields: [taskId], references: [id])
  fromPhase phases? @relation("FromPhase", fields: [fromPhaseId], references: [id])
  toPhase   phases  @relation("ToPhase", fields: [toPhaseId], references: [id])
  changedBy users   @relation("ChangedByUser", fields: [changedById], references: [id])

  @@index([taskId])
  @@index([toPhaseId])
  @@index([changedById])
  @@map("phasehistories")
}

/**
 * ----------------------------------------------------------------
 */
